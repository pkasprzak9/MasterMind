# frozen_string_literal: false

class Game
  def initialize(computer, human)
    @computer = computer
    @human = human
    @game_over = false
    @count_rounds = 1
  end

  # The play_game method generates a code and plays rounds until the game is
  # over or the maximum number of rounds is reached.
  def play_game
    puts 'Would you like to guess or make the secret code?'
    ans = gets.chomp
    case ans
    when 'guess'
      guess_code
    when 'make'
      make_code
    end
  end

  private

  def guess_code
    @computer.generate_code
    puts 'Try to guess this secret code: * * * *'

    until @game_over || @count_rounds > 12
      puts "Round: #{@count_rounds}"
      play_round
      @count_rounds += 1
    end
    puts(@game_over ? 'You win!' : 'You lose!')
  end

  def make_code
    @human.generate_code
  end

  # The play_round method generates a code and determines whether the game is
  # over or not.
  def play_round
    @human.generate_code
    @game_over = @computer.code == @human.code
    return if @game_over

    compare_codes
  end

  # The compare_codes method compares the codes generated by the human
  # and the computer, and counts the number of correct and incorrect guesses.
  # It uses a loop to iterate through the code arrays, incrementing the counts
  # and removing guessed digits to prevent double counting.
  def compare_codes
    correct_place = 0
    incorrect_place = 0
    @computer.code.each_with_index do |num, index|
      if num == @human.code[index]
        correct_place += 1
        @human.code[index] = ''
      elsif @human.code.include?(num)
        incorrect_place += 1
        temp = @human.code.index(num)
        @human.code[temp] = ''
      end
    end
    puts "Correct places: #{correct_place}\nIncorrect places: #{incorrect_place}"
  end
end
