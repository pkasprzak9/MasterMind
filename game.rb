# frozen_string_literal: false
require 'pry-byebug'
class Game
  def initialize(computer, player)
    @computer = computer
    @player = player
    @game_over = false
    @count_rounds = 1
  end

  # The start_game method generates a code and plays rounds until the game is
  # over or the maximum number of rounds is reached.
  def start_game
    puts 'Would you like to guess or make the secret code?'
    ans = gets.chomp
    case ans
    when 'guess'
      play_as_codebreaker
    when 'make'
      play_as_codemaker
    end
  end

  private

  # This method starts a game where the player has to guess a secret code
  # generated by the computer within 12 rounds, and outputs whether the player
  # wins or loses at the end.
  def play_as_codebreaker
    @computer.generate_code
    puts 'Try to guess this secret code: * * * *'

    until @game_over || @count_rounds > 12
      puts "Round: #{@count_rounds}"
      play_round_cb
      @count_rounds += 1
    end
    puts(@game_over ? 'You win!' : 'You lose!')
  end

  # The play_round method generates a code and determines whether the game is
  # over or not.
  def play_round_cb
    @player.generate_code
    @game_over = @computer.code == @player.code
    return if @game_over

    compare_codes
  end


  # The compare_codes method compares the codes generated by the player
  # and the computer, and counts the number of correct and incorrect guesses.
  # It uses a loop to iterate through the code arrays, incrementing the counts
  # and removing guessed digits to prevent double counting.
  def compare_codes_cb
    correct_place = 0
    incorrect_place = 0
    @computer.code.each_with_index do |num, index|
      if num == @player.code[index]
        correct_place += 1
        @player.code[index] = ''
      elsif @player.code.include?(num)
        incorrect_place += 1
        temp = @player.code.index(num)
        @player.code[temp] = ''
      end
    end
    puts "Correct places: #{correct_place}\nIncorrect places: #{incorrect_place}"
  end


  # Plays the game as the code maker, generates a code and plays rounds until
  # the game is over or 12 rounds have been played.
  def play_as_codemaker
    @player.generate_code
    p @player.code
    until @game_over || @count_rounds > 12
      puts "Round: #{@count_rounds}"
      play_round_cm
      @count_rounds += 1
      sleep 1
    end
    puts(@game_over ? 'You loose!' : 'You win!')
  end

  # Plays a single round as the code maker.
  def play_round_cm
    @computer.generate_code

    @game_over = @computer.code == @player.code
    return if @game_over

    puts @computer.code.join('')
    compare_codes_cm
  end

  # Compares the player's and computer's codes, counts correct and incorrect
  # digits in correct and incorrect positions.
  def compare_codes_cm
    correct_place = 0
    incorrect_place = 0
    @player.code.each_with_index do |num, index|
      if num == @computer.code[index]
        correct_place += 1
        @computer.code[index] = ''
      elsif @computer.code.include?(num)
        incorrect_place += 1
        temp = @computer.code.index(num)
        @computer.code[temp] = ''
      end
    end
    puts "Correct places: #{correct_place}\nIncorrect places: #{incorrect_place}"
  end
end
