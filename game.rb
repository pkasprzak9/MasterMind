# frozen_string_literal: false

class Game
  def initialize(computer, player)
    @computer = computer
    @player = player
    @game_over = false
    @count_rounds = 1
  end

  # The start_game method generates a code and plays rounds until the game is
  # over or the maximum number of rounds is reached.
  def start_game
    puts 'Would you like to guess or make the secret code?'
    ans = gets.chomp
    case ans
    when 'guess'
      play_as_codebreaker
    when 'make'
      play_as_codemaker
    end
  end

  private

  # This method starts a game where the player has to guess a secret code
  # generated by the computer within 12 rounds, and outputs whether the player
  # wins or loses at the end.
  def play_as_codebreaker
    @computer.generate_code
    puts 'Try to guess this secret code: * * * *'

    until @game_over || @count_rounds > 12
      puts "Round: #{@count_rounds}"
      play_round_cb
      @count_rounds += 1
    end
    puts(@game_over ? 'You win!' : 'You lose!')
  end

  def play_round_cb
    @player.generate_code
    correct_count, incorrect_count = compare_codes(@computer.code, @player.code)
    puts "#{correct_count} digit(s) in the correct position, #{incorrect_count} digit(s) in the incorrect position."
    @game_over = correct_count == 4
  end

  # Plays the game as the code maker, generates a code and plays rounds until
  # the game is over or 12 rounds have been played.
  def play_as_codemaker
    @player.generate_code
    p @player.code
    until @game_over || @count_rounds > 12
      puts "Round: #{@count_rounds}"
      play_round_cm
      @count_rounds += 1
      sleep 1
    end
    puts(@game_over ? 'You loose!' : 'You win!')
  end

  # Plays a single round as the code maker.
  def play_round_cm
    @computer.generate_code
    correct_count, incorrect_count = compare_codes(@player.code, @computer.code)
    puts "#{correct_count} digit(s) in the correct position, #{incorrect_count} digit(s) in the incorrect position."
    @game_over = correct_count == 4
    puts @computer.code.join('')
  end

  def compare_codes(secret_code, guess_code)
    correct_position_count = 0
    incorrect_position_count = 0
    secret_counts = Hash.new(0)
    guess_counts = Hash.new(0)

    secret_code.each_with_index do |digit, index|
      if digit == guess_code[index]
        correct_position_count += 1
      else
        secret_counts[digit] += 1
        guess_counts[guess_code[index]] += 1
      end
    end

    guess_counts.each do |digit, count|
      incorrect_position_count += [secret_counts[digit], count].min if secret_counts.key?(digit)
    end

    [correct_position_count, incorrect_position_count]
  end
end
